//////////////////////////////////////////////////////////////////////////////
// emissiondata

async function fetchplotattributes() {
  return await fetch("data/plotattributes.json").then(res=>res.json())
}

function plotattributes(atr, canvas) {
  var vs = getsomedata()
  return makeattributes(canvas, vs)
}



function getsomedata() {
	//some real function goes here
var vs = [[1.3084893589422626e6,1254025,1151099,1056621,969897,890291,817219,750145,688575,632059,580182,532563,488852,448729,411899,378091,347059,318574,292426,268425,246393,226170,207607,190567,174926,160569,147390,135293,124188,113995,104639,96051,88167,80931,74288,68191,62594,57457,52741,48412,44438,40791,37443,34370,31549,28960,26583,24401,22398,20560,18872,17323,15901,14596,13398,12299,11289,10363,9512,8731,8015,7357,6753,6199,5690,5223,4794,4401,4040,3708,3404,3124,2868,2633,2416,2218,2036,1869,1716,1575,1445,1327,1218,1118,1026,942,865,794,729,669,614],
[1.3084893589422626e6,1.142237893337924e6,1097309,1012133,933569,861103,794262,732610,675743,623290,574909,530283,489121,451154,416134,383833,354039,326558,301209,277829,256263,236371,218024,201100,185490,171092,157811,145562,134263,123841,114228,105361,97183,89639,82681,76263,70344,64883,59847,55202,50917,46964,43319,39956,36855,33994,31355,28922,26677,24606,22696,20934,19309,17810,16428,15153,13977,12892,11891,10968,10117,9331,8607,7939,7323,6754,6230,5746,5300,4889,4509,4159,3837,3539,3264,3011,2777,2561,2363,2179,2010,1854,1710,1577,1455,1342,1238,1142,1053,971,896],
[1.3084893589422626e6,1.142237893337924e6,1.0630086016472452e6,1020940,941212,867711,799949,737479,679887,626793,577846,532720,491119,452766,417409,384812,354761,327057,301516,277970,256263,236251,217801,200793,185112,170656,157329,145043,133716,123274,113647,104772,96590,89047,82094,75683,69772,64324,59301,54670,50400,46464,42836,39491,36407,33564,30943,28526,26299,24245,22352,20606,18997,17513,16146,14885,13722,12651,11663,10752,9912,9138,8425,7767,7160,6601,6086,5610,5172,4768,4396,4053,3736,3444,3175,2927,2699,2488,2294,2115,1950,1797,1657,1528,1408,1298,1197,1103,1017,938,865],
[1.3084893589422626e6,1.142237893337924e6,1.0630086016472452e6,1.0865201639762884e6,1038733,948721,866509,791422,722841,660203,602993,550741,503016,459427,419615,383253,350043,319710,292005,266701,243590,222482,203203,185594,169511,154822,141406,129153,117961,107739,98403,89876,82087,74974,68477,62543,57124,52174,47652,43523,39752,36307,33161,30287,27663,25266,23076,21076,19250,17582,16058,14667,13396,12235,11175,10206,9322,8514,7776,7103,6487,5925,5412,4943,4514,4123,3766,3439,3141,2869,2621,2393,2186,1997,1824,1666,1521,1389,1269,1159,1059,967,883,807,737,673,615,561,513,468,428],
[1.3084893589422626e6,1.142237893337924e6,1.0630086016472452e6,1.0865201639762884e6,994057.0296498897,950437,868263,793194,724615,661965,604732,552448,504684,461049,421187,384772,351505,321114,293351,267988,244818,223651,204314,186650,170512,155770,142302,129999,118759,108491,99111,90542,82714,75563,69030,63061,57609,52628,48078,43921,40124,36655,33486,30591,27946,25530,23322,21306,19464,17781,16244,14839,13556,12384,11313,10335,9442,8625,7880,7198,6576,6007,5488,5014,4580,4184,3822,3492,3190,2914,2662,2432,2222,2030,1854,1694,1547,1414,1291,1180,1078,985,899,822,751,686,626,572,523,478,436],
[1.3084893589422626e6,1.142237893337924e6,1.0630086016472452e6,1.0865201639762884e6,994057.0296498897,1.0175866215791425e6,967405,873586,788866,712362,643277,580892,524557,473686,427748,386265,348805,314978,284431,256847,231938,209445,189133,170791,154228,139271,125764,113568,102554,92608,83627,75517,68193,61580,55608,50215,45345,40948,36977,33391,30152,27228,24588,22203,20050,18105,16350,14764,13332,12039,10872,9817,8865,8005,7229,6528,5895,5323,4807,4341,3920,3540,3196,2886,2607,2354,2125,1919,1733,1565,1413,1276,1152,1041,940,849,766,692,625,564,510,460,416,375,339,306,276,250,225,203,184],
[1.3084893589422626e6,1.142237893337924e6,1.0630086016472452e6,1.0865201639762884e6,994057.0296498897,1.0175866215791425e6,1.075500685741929e6,1013057,897741,795552,704996,624747,553632,490613,434767,385278,341422,302559,268119,237599,210553,186586,165347,146526,129847,115067,101969,90362,80076,70961,62884,55726,49382,43761,38780,34366,30454,26987,23915,21193,18781,16643,14749,13070,11582,10264,9095,8060,7143,6330,5609,4971,4405,3903,3459,3065,2716,2407,2133,1890,1675,1485,1316,1166,1033,915,811,719,637,565,500,443,393,348,309,273,242,215,190,169,149,132,117,104,92,82,72,64,57,50,45],
[1.3084893589422626e6,1.142237893337924e6,1.0630086016472452e6,1.0865201639762884e6,994057.0296498897,1.0175866215791425e6,1.075500685741929e6,1.061853483645052e6,993067,867246,757366,661408,577608,504425,440515,384702,335960,293394,256221,223758,195408,170650,149029,130147,113657,99257,86681,75699,66108,57732,50417,44029,38451,33579,29325,25609,22365,19531,17056,14895,13008,11360,9921,8664,7566,6607,5770,5039,4401,3843,3356,2931,2560,2235,1952,1705,1489,1300,1135,992,866,756,660,577,504,440,384,335,293,256,223,195,170,149,130,113,99,87,76,66,58,50,44,38,34,29,26,22,20,17,15],
[1.3084893589422626e6,1.142237893337924e6,1.0630086016472452e6,1.0865201639762884e6,994057.0296498897,1.0175866215791425e6,1.075500685741929e6,1.061853483645052e6,1.066543836998494e6,986791,842987,720140,615195,525543,448956,383530,327639,279892,239104,204260,174493,149064,127341,108784,92931,79388,67819,57936,49493,42280,36119,30855,26359,22518,19236,16433,14038,11992,10245,8752,7476,6387,5456,4661,3982,3402,2906,2482,2121,1812,1548,1322,1129,965,824,704,601,514,439,375,320,274,234,200,171,146,125,106,91,78,66,57,48,41,35,30,26,22,19,16,14,12,10,8.6,7.3,6.2,5.3,4.6,3.9,3.3,2.8],
[1.3084893589422626e6,1.142237893337924e6,1.0630086016472452e6,1.0865201639762884e6,994057.0296498897,1.0175866215791425e6,1.075500685741929e6,1.061853483645052e6,1.066543836998494e6,1.0742510341275395e6,979048,810800,671466,556076,460515,381376,315838,261561,216613,179388,148561,123031,101888,84379,69878,57870,47925,39689,32869,27220,22543,18669,15460,12804,10603,8781,7272,6022,4988,4130,3421,2833,2346,1943,1609,1332,1103,914,757,627,519,430,356,295,244,202,167,139,115,95,79,65,54,45,37,31,25,21,17,14,12,9.9,8.2,6.8,5.6,4.7,3.9,3.2,2.6,2.2,1.8,1.5,1.2,1,0.85,0.71,0.59,0.48,0.4,0.33,0.28],
[1.3084893589422626e6,1.142237893337924e6,1.0630086016472452e6,1.0865201639762884e6,994057.0296498897,1.0175866215791425e6,1.075500685741929e6,1.061853483645052e6,1.066543836998494e6,1.0742510341275395e6,979048,810800,671466,556076,460515,381376,315838,261561,216613,179388,148561,123031,101888,84379,69878,57870,47925,39689,32869,27220,22543,18669,15460,12804,10603,8781,7272,6022,4988,4130,3421,2833,2346,1943,1609,1332,1103,914,757,627,519,430,356,295,244,202,167,139,115,95,79,65,54,45,37,31,25,21,17,14,12,9.9,8.2,6.8,5.6,4.7,3.9,3.2,2.6,2.2,1.8,1.5,1.2,1,0.85,0.71,0.59,0.48,0.4,0.33,0.28],
[1.3084893589422626e6,1.142237893337924e6,1.0630086016472452e6,1.0865201639762884e6,994057.0296498897,1.0175866215791425e6,1.075500685741929e6,1.061853483645052e6,1.066543836998494e6,1.0742510341275395e6,979048,810800,671466,556076,460515,381376,315838,261561,216613,179388,148561,123031,101888,84379,69878,57870,47925,39689,32869,27220,22543,18669,15460,12804,10603,8781,7272,6022,4988,4130,3421,2833,2346,1943,1609,1332,1103,914,757,627,519,430,356,295,244,202,167,139,115,95,79,65,54,45,37,31,25,21,17,14,12,9.9,8.2,6.8,5.6,4.7,3.9,3.2,2.6,2.2,1.8,1.5,1.2,1,0.85,0.71,0.59,0.48,0.4,0.33,0.28],
[1.3084893589422626e6,1.142237893337924e6,1.0630086016472452e6,1.0865201639762884e6,994057.0296498897,1.0175866215791425e6,1.075500685741929e6,1.061853483645052e6,1.066543836998494e6,1.0742510341275395e6,979048,810800,671466,556076,460515,381376,315838,261561,216613,179388,148561,123031,101888,84379,69878,57870,47925,39689,32869,27220,22543,18669,15460,12804,10603,8781,7272,6022,4988,4130,3421,2833,2346,1943,1609,1332,1103,914,757,627,519,430,356,295,244,202,167,139,115,95,79,65,54,45,37,31,25,21,17,14,12,9.9,8.2,6.8,5.6,4.7,3.9,3.2,2.6,2.2,1.8,1.5,1.2,1,0.85,0.71,0.59,0.48,0.4,0.33,0.28],
[1.3084893589422626e6,1.142237893337924e6,1.0630086016472452e6,1.0865201639762884e6,994057.0296498897,1.0175866215791425e6,1.075500685741929e6,1.061853483645052e6,1.066543836998494e6,1.0742510341275395e6,979048,810800,671466,556076,460515,381376,315838,261561,216613,179388,148561,123031,101888,84379,69878,57870,47925,39689,32869,27220,22543,18669,15460,12804,10603,8781,7272,6022,4988,4130,3421,2833,2346,1943,1609,1332,1103,914,757,627,519,430,356,295,244,202,167,139,115,95,79,65,54,45,37,31,25,21,17,14,12,9.9,8.2,6.8,5.6,4.7,3.9,3.2,2.6,2.2,1.8,1.5,1.2,1,0.85,0.71,0.59,0.48,0.4,0.33,0.28],
[1.3084893589422626e6,1.142237893337924e6,1.0630086016472452e6,1.0865201639762884e6,994057.0296498897,1.0175866215791425e6,1.075500685741929e6,1.061853483645052e6,1.066543836998494e6,1.0742510341275395e6,979048,810800,671466,556076,460515,381376,315838,261561,216613,179388,148561,123031,101888,84379,69878,57870,47925,39689,32869,27220,22543,18669,15460,12804,10603,8781,7272,6022,4988,4130,3421,2833,2346,1943,1609,1332,1103,914,757,627,519,430,356,295,244,202,167,139,115,95,79,65,54,45,37,31,25,21,17,14,12,9.9,8.2,6.8,5.6,4.7,3.9,3.2,2.6,2.2,1.8,1.5,1.2,1,0.85,0.71,0.59,0.48,0.4,0.33,0.28],
[1.3084893589422626e6,1.142237893337924e6,1.0630086016472452e6,1.0865201639762884e6,994057.0296498897,1.0175866215791425e6,1.075500685741929e6,1.061853483645052e6,1.066543836998494e6,1.0742510341275395e6,979048,810800,671466,556076,460515,381376,315838,261561,216613,179388,148561,123031,101888,84379,69878,57870,47925,39689,32869,27220,22543,18669,15460,12804,10603,8781,7272,6022,4988,4130,3421,2833,2346,1943,1609,1332,1103,914,757,627,519,430,356,295,244,202,167,139,115,95,79,65,54,45,37,31,25,21,17,14,12,9.9,8.2,6.8,5.6,4.7,3.9,3.2,2.6,2.2,1.8,1.5,1.2,1,0.85,0.71,0.59,0.48,0.4,0.33,0.28],
[1.3084893589422626e6,1.142237893337924e6,1.0630086016472452e6,1.0865201639762884e6,994057.0296498897,1.0175866215791425e6,1.075500685741929e6,1.061853483645052e6,1.066543836998494e6,1.0742510341275395e6,979048,810800,671466,556076,460515,381376,315838,261561,216613,179388,148561,123031,101888,84379,69878,57870,47925,39689,32869,27220,22543,18669,15460,12804,10603,8781,7272,6022,4988,4130,3421,2833,2346,1943,1609,1332,1103,914,757,627,519,430,356,295,244,202,167,139,115,95,79,65,54,45,37,31,25,21,17,14,12,9.9,8.2,6.8,5.6,4.7,3.9,3.2,2.6,2.2,1.8,1.5,1.2,1,0.85,0.71,0.59,0.48,0.4,0.33,0.28],
[1.3084893589422626e6,1.142237893337924e6,1.0630086016472452e6,1.0865201639762884e6,994057.0296498897,1.0175866215791425e6,1.075500685741929e6,1.061853483645052e6,1.066543836998494e6,1.0742510341275395e6,979048,810800,671466,556076,460515,381376,315838,261561,216613,179388,148561,123031,101888,84379,69878,57870,47925,39689,32869,27220,22543,18669,15460,12804,10603,8781,7272,6022,4988,4130,3421,2833,2346,1943,1609,1332,1103,914,757,627,519,430,356,295,244,202,167,139,115,95,79,65,54,45,37,31,25,21,17,14,12,9.9,8.2,6.8,5.6,4.7,3.9,3.2,2.6,2.2,1.8,1.5,1.2,1,0.85,0.71,0.59,0.48,0.4,0.33,0.28],
[1.3084893589422626e6,1.142237893337924e6,1.0630086016472452e6,1.0865201639762884e6,994057.0296498897,1.0175866215791425e6,1.075500685741929e6,1.061853483645052e6,1.066543836998494e6,1.0742510341275395e6,979048,810800,671466,556076,460515,381376,315838,261561,216613,179388,148561,123031,101888,84379,69878,57870,47925,39689,32869,27220,22543,18669,15460,12804,10603,8781,7272,6022,4988,4130,3421,2833,2346,1943,1609,1332,1103,914,757,627,519,430,356,295,244,202,167,139,115,95,79,65,54,45,37,31,25,21,17,14,12,9.9,8.2,6.8,5.6,4.7,3.9,3.2,2.6,2.2,1.8,1.5,1.2,1,0.85,0.71,0.59,0.48,0.4,0.33,0.28],
[1.3084893589422626e6,1.142237893337924e6,1.0630086016472452e6,1.0865201639762884e6,994057.0296498897,1.0175866215791425e6,1.075500685741929e6,1.061853483645052e6,1.066543836998494e6,1.0742510341275395e6,979048,810800,671466,556076,460515,381376,315838,261561,216613,179388,148561,123031,101888,84379,69878,57870,47925,39689,32869,27220,22543,18669,15460,12804,10603,8781,7272,6022,4988,4130,3421,2833,2346,1943,1609,1332,1103,914,757,627,519,430,356,295,244,202,167,139,115,95,79,65,54,45,37,31,25,21,17,14,12,9.9,8.2,6.8,5.6,4.7,3.9,3.2,2.6,2.2,1.8,1.5,1.2,1,0.85,0.71,0.59,0.48,0.4,0.33,0.28]];

return vs;
}
///////////////////////////////////////////////////////////////////////////////

function mix(a, b, t) {return (1-t)*a + t*b;}

function plotlerp(v,x,yearsperpoint) {
    var i = Math.floor(x*yearsperpoint);
    var o = (x*yearsperpoint)%1;
    return mix(v[i], v[Math.min(i+1, v.length-1)], o)
}

function vec2coords(v, Nx,Ny, yearsperpoint,tonsperpoint, maxtons) {
    var coord=[];
    var usedtons=0.0;
    for (var x=0; x<Nx; x++) {
        var Ny_column = Math.floor(plotlerp(v, x, yearsperpoint)/tonsperpoint)
        for (var y=0; y<Ny_column; y++) {
            usedtons += tonsperpoint;
            if (usedtons<maxtons) {
                coord.push([x,y])
            }
        }
    }
    return coord
}

///////////////////////////////////////////////////////////////////////////////

function minimumlen(vs) {
    var M=[];
    for (var k in vs) {
        M.push(vs[k].length)
    }
    return Math.min(...M)
}

function caplength(coords) {
    var cap=minimumlen(coords)
    for (var i=0; i<coords.length; i++) {
        coords[i]=coords[i].slice(0,cap)
    }
    //return coords
}

///////////////////////////////////////////////////////////////////////////////

function maximum(vs) {
    var M=[]; 
    for (var k in vs) {M.push(Math.max(...vs[k]))}
    return Math.max(...M)
}

function vecs2coords(vs, Nx, Ny, yearsperpoint, tonsperpoint, budget_tons) {
    var coords = []
    for (var i=0; i<vs.length; i++) {
        coords.push( vec2coords(vs[i], Nx,Ny, yearsperpoint,tonsperpoint, budget_tons) )
        //console.log(c.length)
    }
    caplength(coords)
    return coords
}

///////////////////////////////////////////////////////////////////////////////

function is_in(a,b) {
    for (var i=0; i<b.length; i++) {
        if (b[i][0] == a[0] && b[i][1] == a[1]) {return true;}
    }
    return false;
}

function not_in(a,b) {return !is_in(a,b)}

function push_move_from_coords(p1, coords, year) {
    for (var i=0; i<coords[year].length; i++) {
        if (not_in(coords[year][i], coords[year+1])) {
            p1.push(coords[year][i])
        }    
    }
}

function push_move_to_coords(p2, coords, year) {
    for (var i=0; i<coords[year+1].length; i++) {
        if (not_in(coords[year+1][i], coords[year])) {
            p2.push(coords[year+1][i])
        }    
    }
}

function static_coords(coords, p1, p2) {
    //there has to be some better way of finding all non-moving points?..
    var p = []
    for (var n=0; n<coords.length; n++) {
        for (var i=0; i<coords[n].length; i++) {
            var c = coords[n][i];
            if (not_in(c, p) && not_in(c, p1) && not_in(c, p2)) {
                p.push(c);
            }
        }
    }
    return p;
}

function push_animationtiming(t, L, v) {
    while (t.length < L*2) {
        var r = Math.random()*0.04
        t.push(v+r)
        t.push(v+0.05+r)
    }
}

function flatten(x) {return [].concat(...x);} 

function coords2attributes(coords) {
    var p1=[]
    var p2=[]
    var t=[]
    for (var year=0; year<coords.length-1; year++) {
        push_move_from_coords(p1, coords, year);
        push_move_to_coords(p2, coords, year);
        push_animationtiming(t, p1.length, year/coords.length)
    }
    var p_static = static_coords(coords, p1, p2)
    p1.push(...p_static)
    p2.push(...p_static)
    push_animationtiming(t, p1.length, 1.0)

    var atr = {};
    atr.index = [...Array(t.length).keys()];
    atr.p1 = flatten(p1);
    atr.p2 = flatten(p2);
    atr.tA = t;
    return atr
}

///////////////////////////////////////////////////////////////////////////////

function makeattributes(canvas, vs) {
	//these 4 things determine the number of actual points
	var aspect = 16/9;
	//var canvas_width = 720;
	var canvas_width = Math.floor(canvas.width);
	var canvas_height = Math.floor(canvas_width/aspect);
	var pointspacing = 5;
	var budget_tons = 4e9; //how many tons to actually plot

	var Nx = canvas_width/pointspacing;
	var Ny = canvas_height/pointspacing;
	var plot_maxyears = vs[0].length;

	console.log("Nx",Nx)
	console.log("Ny",Ny)

	var plot_maxtons = maximum(vs);
	var yearsperpoint = plot_maxyears/Nx;
	var tonsperpoint = plot_maxtons/Ny;
	console.log("yearsperpoint",yearsperpoint)
	console.log("tonsperpoint",tonsperpoint)

	document.getElementById("slidertext").innerHTML = ["CO² per point: ",Math.floor(tonsperpoint)," tons"].join("")
	uniforms.Nxy = [Nx,Ny];
	uniforms.yearsperpoint = yearsperpoint;
	uniforms.tonsperpoint = tonsperpoint;

	var coords = vecs2coords(vs, Nx, Ny, yearsperpoint, tonsperpoint, budget_tons)
	var atr = coords2attributes(coords)
	return atr;
}
